%%%-------------------------------------------------------------------
%%% @author nisbus <nisbus@gmail.com>
%%% @copyright (C) 2012, nisbus
%%% @doc
%%%
%%% @end
%%% Created : 31 Oct 2012 by nisbus <nisbus@gmail.com>
%%%-------------------------------------------------------------------
-module(maths).
-define(EXPM,0.13533528323661269189).
-define(S2PI,2.50662827463100050242).
-define(DEFAULT,{[3.23774891776946035970,6.91522889068984211695,
		  3.93881025292474443415,1.33303460815807542389,
		  2.01485389549179081538*0.1,1.23716634817820021358*0.01,
		  3.01581553508235416007*0.0001,2.65806974686737550832*0.000001,
		  6.23974539184983293730*0.000000001],
		 [1,6.02427039364742014255,3.67983563856160859403,
		  1.37702099489081330271,2.16236993594496635890*0.1,
		  1.34204006088543189037*0.01,3.28014464682127739104*0.0001,
		  2.89247864745380683936*0.000001,6.79019408009981274425*0.000000001]
		}).
-define(LESSTHAN8,{[4.05544892305962419923,31.5251094599893866154,
		    57.1628192246421288162,44.0805073893200834700,
		    14.6849561928858024014,2.18663306850790267539,
		    -(1.40256079171354495875*0.1),-(3.50424626827848203418*0.01),
		    -(8.57456785154685413611*0.0001)],
		   [1,15.7799883256466749731,45.3907635128879210584,
		    41.3172038254672030440,15.0425385692907503408,
		    2.50464946208309415979,-(1.42182922854787788574*0.1),
		    -(3.80806407691578277194*0.01),-(9.33259480895457427372*0.0001)]}).
-define(LARGERTHANEXPM,{[-59.9633501014107895267,98.0010754185999661536,
			 -56.6762857469070293439,13.9312609387279679503,
			 -1.23916583867381258016],
			[1,1.95448858338141759834,4.67627912898881538453,
			 86.3602421390890590575,-225.462687854119370527,
			 200.260212380060660359,-82.0372256168333339912,
			 15.9056225126211695515,-1.18331621121330003142]}).
-export([inv_normal_dist/1]).

%%%===================================================================
%%% API
%%%===================================================================
inv_normal_dist(Val) when Val =< 0.0 ->
    {V,_} = string:to_float("1.0e300"),
    -1*V;

inv_normal_dist(Val) when Val >= 1.0 ->
    {V,_} = string:to_float("1.0e300"),
    V;

inv_normal_dist(Val) ->    
    {Y0,Code} = solve_y_and_code(Val),
    case Y0 > ?EXPM of
	true ->
	    Y1 = Y0-0.5,
	    Y2 = Y1*Y1,    
	    {P,Q} = ?LARGERTHANEXPM,
	    P0 = array_calc(P,Y2),
	    Q0 = array_calc(Q,Y2),
	    X0=Y1+Y1*Y2*P0/Q0,
	    X0*?S2PI;
	_ ->
	    X = math:sqrt(-(2.0*math:log(Y0))),
	    X0 = X-math:log(X)/X,
	    Z = 1.0/X,
	    {P,Q} = case X < 8 of
			true -> ?LESSTHAN8;
			_ -> ?DEFAULT
		    end,
	        P0 = array_calc(P,Z),
	    Q0 = array_calc(Q,Z),
	    X1 = Z*P0/Q0,
	    case Code =/= 0.0 of
		true ->
		    (X0-X1)*-1;
		false ->
		    X0-X1
	    end
    end.

%%%===================================================================
%%% Internal
%%%===================================================================
solve_y_and_code(Val) when Val > 1.0-?EXPM ->
    {1.0-Val, 0.0};
solve_y_and_code(Val) ->
    {Val,1.0}.

array_calc(L,Val) ->
    {N,_Count} =lists:foldl(fun(I,{X,C}) ->
				    case C of
					0 ->
					    {I,1};
					_ ->
					    {Val*X+I,C+1}
				    end
			    end,{0,0},L),
    N.
